{"ast":null,"code":"var https=require('https');var querystring=require('querystring');var config=require('../config');export function aws_saveTaskData(encryptedMetadata,data){return new Promise(function(resolve,reject){// Call api endpoint for update\nvar postData=querystring.stringify({encrypted_metadata:encryptedMetadata,data:data});var postOptions={hostname:config.awsLambda.saveTaskData.host,port:443,path:config.awsLambda.saveTaskData.path,method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded','Content-Length':Buffer.byteLength(postData)}};var req=https.request(postOptions,function(res){res.setEncoding('utf8');res.on('data',function(){});res.on('end',resolve);});req.on('error',function(e){if(config.debug){console.log(\"ERROR:\");console.log(e);}reject(e);});req.write(postData);req.end();});}export function aws_fetchLink(encryptedMetadata){return new Promise(function(resolve,reject){// Call api endpoint for update\nvar postData=querystring.stringify({encrypted_metadata:encryptedMetadata});var postOptions={hostname:config.awsLambda.fetchLink.host,port:443,path:config.awsLambda.fetchLink.path,method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded','Content-Length':Buffer.byteLength(postData)}};var req=https.request(postOptions,function(res){res.setEncoding('utf8');var body='';res.on('data',function(d){body+=d;});res.on('end',function(){return resolve(body);});});req.on('error',function(e){if(config.debug){console.log(\"ERROR:\");console.log(e);}reject(e);});req.write(postData);req.end();});}","map":{"version":3,"sources":["/Users/eren_kafadar/Documents/eren_kafadar/LAB/per_rf/src/lib/aws_lambda.js"],"names":["https","require","querystring","config","aws_saveTaskData","encryptedMetadata","data","Promise","resolve","reject","postData","stringify","encrypted_metadata","postOptions","hostname","awsLambda","saveTaskData","host","port","path","method","headers","Buffer","byteLength","req","request","res","setEncoding","on","e","debug","console","log","write","end","aws_fetchLink","fetchLink","body","d"],"mappings":"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","sourcesContent":["var https = require('https');\nvar querystring = require('querystring');\nconst config = require('../config');\n\nexport function aws_saveTaskData(encryptedMetadata, data) {\n  return new Promise(function(resolve, reject) {\n    // Call api endpoint for update\n    const postData = querystring.stringify({\n        encrypted_metadata: encryptedMetadata,\n        data: data,\n    });\n\n    const postOptions = {\n      hostname: config.awsLambda.saveTaskData.host,\n      port: 443,\n      path: config.awsLambda.saveTaskData.path,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Length': Buffer.byteLength(postData),\n      },\n    };\n\n    const req = https.request(postOptions, (res) => {\n      res.setEncoding('utf8');\n      res.on('data', () => {});\n      res.on('end', resolve);\n    });\n\n    req.on('error', (e) => {\n      if (config.debug) {\n        console.log(\"ERROR:\");\n        console.log(e);\n      }\n      reject(e);\n    });\n\n    req.write(postData);\n    req.end();\n  });\n}\n\n\nexport function aws_fetchLink(encryptedMetadata) {\n  return new Promise(function(resolve, reject) {\n    // Call api endpoint for update\n    const postData = querystring.stringify({\n        encrypted_metadata: encryptedMetadata,\n    });\n\n    const postOptions = {\n      hostname: config.awsLambda.fetchLink.host,\n      port: 443,\n      path: config.awsLambda.fetchLink.path,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Length': Buffer.byteLength(postData),\n      },\n    };\n\n    const req = https.request(postOptions, (res) => {\n      res.setEncoding('utf8');\n      var body = '';\n      res.on('data', function(d) {\n          body += d;\n       });\n      res.on('end', () => resolve(body));\n    });\n\n    req.on('error', (e) => {\n      if (config.debug) {\n        console.log(\"ERROR:\");\n        console.log(e);\n      }\n      reject(e);\n    });\n\n    req.write(postData);\n    req.end();\n  });\n}\n"]},"metadata":{},"sourceType":"module"}